using System;
using System.Collections.Generic;
using System.Linq;
public class Program
{
    public class Client
    {
        public string Name { get; set; }
        public List<DateTime> VisitDates { get; set; } = new List<DateTime>();
    }
    public class Trainer
    {
        public string Name { get; set; }
    }
    public class Visit
    {
        public Client Client { get; set; }
        public Trainer Trainer { get; set; }
        public DateTime VisitDate { get; set; }
    }
    public static void Main(string[] args)
    {
        List<Client> clients = new List<Client>();
        List<Trainer> trainers = new List<Trainer>();
        List<Visit> visits = new List<Visit>();
        Console.WriteLine("enter how many treners");
        int trainerCount = int.Parse(Console.ReadLine());
        for (int i = 0; i < trainerCount; i++)
        {
            Console.WriteLine("enter trener.s name");
            string trainerName = Console.ReadLine();
            trainers.Add(new Trainer { Name = trainerName });
        }
        Console.WriteLine("enter how many klients");
        int clientCount = int.Parse(Console.ReadLine());
        for (int i = 0; i < clientCount; i++)
        {
            Console.WriteLine("enter kient.s name");
            string clientName = Console.ReadLine();
            clients.Add(new Client { Name = clientName });
        }
        Console.WriteLine("enter how many visits");
        int visitCount = int.Parse(Console.ReadLine());
        for (int i = 0; i < visitCount; i++)
        {
            Console.WriteLine("enter klient.s name");
            string clientName = Console.ReadLine();
            Console.WriteLine("enter trener.s name");
            string trainerName = Console.ReadLine();
            Console.WriteLine("enter date of visit (year-month-day)");
            DateTime visitDate;
            while (!DateTime.TryParse(Console.ReadLine(), out visitDate))
            {
                Console.WriteLine("error date");
            }
            var client = clients.FirstOrDefault(c => c.Name == clientName);
            var trainer = trainers.FirstOrDefault(t => t.Name == trainerName);
            if (client != null && trainer != null)
            {
                visits.Add(new Visit { Client = client, Trainer = trainer, VisitDate = visitDate });
                client.VisitDates.Add(visitDate);
            }
            else
            {
                Console.WriteLine("no klient/no trener");
            }
        }
        var groupedByDateAndTrainer = visits
            .GroupBy(v => new { v.VisitDate.Date, v.Trainer.Name })
            .Select(g => new
            {
                Date = g.Key.Date,
                Trainer = g.Key.Name,
                ClientCount = g.Select(v => v.Client.Name).Distinct().Count()
            });
        Console.WriteLine("\nvisits with dates and treners");
        foreach (var group in groupedByDateAndTrainer)
        {
            Console.WriteLine($"date: {group.Date.ToShortDateString()}, trener: {group.Trainer}, how many clients: {group.ClientCount}");
        }
        var maxVisitsClient = clients
            .Select(c => new
            {
                ClientName = c.Name,
                VisitCount = c.VisitDates.Distinct().Count()
            })
            .OrderByDescending(c => c.VisitCount)
            .FirstOrDefault();

        if (maxVisitsClient != null)
        {
            Console.WriteLine($"\nclient with the most visits: {maxVisitsClient.ClientName}, how many visits {maxVisitsClient.VisitCount}");
        }
        Console.WriteLine("\nall dates all clients");
        foreach (var client in clients)
        {
            Console.WriteLine($"client: {client.Name}");
            foreach (var date in client.VisitDates.Distinct())
            {
                Console.WriteLine($" - {date.ToShortDateString()}");
            }
        }
    }
}